{
    "language": "Solidity",
    "sources": {
        "./contracts/ReaperAutoCompoundScreamLeverage.sol": {
            "content": "// SPDX-License-Identifier: MIT\n\nimport './abstract/ReaperBaseStrategy.sol';\nimport './interfaces/IUniswapRouter.sol';\nimport './interfaces/CErc20I.sol';\nimport './interfaces/IComptroller.sol';\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\n\npragma solidity 0.8.11;\n\n/**\n * @dev This strategy will deposit and leverage a token on Scream to maximize yield by farming Scream tokens\n */\ncontract ReaperAutoCompoundScreamLeverage is ReaperBaseStrategy {\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    /**\n     * @dev Tokens Used:\n     * {WFTM} - Required for liquidity routing when doing swaps. Also used to charge fees on yield.\n     * {SCREAM} - The reward token for farming\n     * {want} - The vault token the strategy is maximizing\n     * {cWant} - The Scream version of the want token\n     */\n    address public constant WFTM = 0x21be370D5312f44cB42ce377BC9b8a0cEF1A4C83;\n    address public constant SCREAM = 0xe0654C8e6fd4D733349ac7E09f6f23DA256bF475;\n    address public want;\n    CErc20I public cWant;\n\n    /**\n     * @dev Third Party Contracts:\n     * {UNI_ROUTER} - the UNI_ROUTER for target DEX\n     * {comptroller} - Scream contract to enter market and to claim Scream tokens\n     */\n    address public constant UNI_ROUTER = 0xF491e7B69E4244ad4002BC14e878a34207E38c29;\n    IComptroller public comptroller;\n\n    /**\n     * @dev Routes we take to swap tokens\n     * {screamToWftmRoute} - Route we take to get from {SCREAM} into {WFTM}.\n     * {wftmToWantRoute} - Route we take to get from {WFTM} into {want}.\n     */\n    address[] public screamToWftmRoute;\n    address[] public wftmToWantRoute;\n\n    /**\n     * @dev Scream variables\n     * {markets} - Contains the Scream tokens to farm, used to enter markets and claim Scream\n     * {MANTISSA} - The unit used by the Compound protocol\n     * {LTV_SAFETY_ZONE} - We will only go up to 98% of max allowed LTV for {targetLTV}\n     */\n    address[] public markets;\n    uint256 public constant MANTISSA = 1e18;\n    uint256 public constant LTV_SAFETY_ZONE = 0.98 ether;\n\n    /**\n     * @dev Strategy variables\n     * {targetLTV} - The target loan to value for the strategy where 1 ether = 100%\n     * {allowedLTVDrift} - How much the strategy can deviate from the target ltv where 0.01 ether = 1%\n     * {balanceOfPool} - The total balance deposited into Scream (supplied - borrowed)\n     * {borrowDepth} - The maximum amount of loops used to leverage and deleverage\n     * {minWantToLeverage} - The minimum amount of want to leverage in a loop\n     * {withdrawSlippageTolerance} - Maximum slippage authorized when withdrawing\n     */\n    uint256 public targetLTV;\n    uint256 public allowedLTVDrift;\n    uint256 public balanceOfPool;\n    uint256 public borrowDepth;\n    uint256 public minWantToLeverage;\n    uint256 public maxBorrowDepth;\n    uint256 public minScreamToSell;\n    uint256 public withdrawSlippageTolerance;\n\n    /**\n     * @dev Initializes the strategy. Sets parameters, saves routes, and gives allowances.\n     * @notice see documentation for each variable above its respective declaration.\n     */\n    function initialize(\n        address _vault,\n        address[] memory _feeRemitters,\n        address[] memory _strategists,\n        address _scWant\n    ) public initializer {\n        __ReaperBaseStrategy_init(_vault, _feeRemitters, _strategists);\n        cWant = CErc20I(_scWant);\n        markets = [_scWant];\n        comptroller = IComptroller(cWant.comptroller());\n        want = cWant.underlying();\n        wftmToWantRoute = [WFTM, want];\n        screamToWftmRoute = [SCREAM, WFTM];\n\n        targetLTV = 0.72 ether;\n        allowedLTVDrift = 0.01 ether;\n        balanceOfPool = 0;\n        borrowDepth = 12;\n        minWantToLeverage = 1000;\n        maxBorrowDepth = 15;\n        minScreamToSell = 1000;\n        withdrawSlippageTolerance = 50;\n\n        _giveAllowances();\n\n        comptroller.enterMarkets(markets);\n    }\n\n    /**\n     * @dev Withdraws funds and sents them back to the vault.\n     * It withdraws {want} from Scream\n     * The available {want} minus fees is returned to the vault.\n     */\n    function withdraw(uint256 _withdrawAmount) external doUpdateBalance {\n        require(msg.sender == vault);\n\n        uint256 wantBalance = IERC20Upgradeable(want).balanceOf(address(this));\n        if (_withdrawAmount <= wantBalance) {\n            IERC20Upgradeable(want).safeTransfer(vault, _withdrawAmount);\n            return;\n        }\n\n        uint256 _ltv = _calculateLTVAfterWithdraw(_withdrawAmount);\n\n        if (_shouldLeverage(_ltv)) {\n            // Strategy is underleveraged so can withdraw underlying directly\n            _withdrawUnderlyingToVault(_withdrawAmount);\n            _leverMax();\n        } else if (_shouldDeleverage(_ltv)) {\n            _deleverage(_withdrawAmount);\n\n            // Strategy has deleveraged to the point where it can withdraw underlying\n            _withdrawUnderlyingToVault(_withdrawAmount);\n        } else {\n            // LTV is in the acceptable range so the underlying can be withdrawn directly\n            _withdrawUnderlyingToVault(_withdrawAmount);\n        }\n    }\n\n    /**\n     * @dev Calculates the LTV using existing exchange rate,\n     * depends on the cWant being updated to be accurate.\n     * Does not update in order provide a view function for LTV.\n     */\n    function calculateLTV() external view returns (uint256 ltv) {\n        (, uint256 cWantBalance, uint256 borrowed, uint256 exchangeRate) = cWant.getAccountSnapshot(address(this));\n\n        uint256 supplied = (cWantBalance * exchangeRate) / MANTISSA;\n\n        if (supplied == 0 || borrowed == 0) {\n            return 0;\n        }\n\n        ltv = (MANTISSA * borrowed) / supplied;\n    }\n\n    /**\n     * @dev Returns the approx amount of profit from harvesting.\n     *      Profit is denominated in WFTM, and takes fees into account.\n     */\n    function estimateHarvest() external view override returns (uint256 profit, uint256 callFeeToUser) {\n        uint256 rewards = predictScreamAccrued();\n        if (rewards == 0) {\n            return (0, 0);\n        }\n        profit = IUniswapRouter(UNI_ROUTER).getAmountsOut(rewards, screamToWftmRoute)[1];\n        uint256 wftmFee = (profit * totalFee) / PERCENT_DIVISOR;\n        callFeeToUser = (wftmFee * callFee) / PERCENT_DIVISOR;\n        profit -= wftmFee;\n    }\n\n    /**\n     * @dev Emergency function to deleverage in case regular deleveraging breaks\n     */\n    function manualDeleverage(uint256 amount) external doUpdateBalance {\n        _onlyStrategistOrOwner();\n        require(cWant.redeemUnderlying(amount) == 0);\n        require(cWant.repayBorrow(amount) == 0);\n    }\n\n    /**\n     * @dev Emergency function to deleverage in case regular deleveraging breaks\n     */\n    function manualReleaseWant(uint256 amount) external doUpdateBalance {\n        _onlyStrategistOrOwner();\n        require(cWant.redeemUnderlying(amount) == 0);\n    }\n\n    /**\n     * @dev Sets a new LTV for leveraging.\n     * Should be in units of 1e18\n     */\n    function setTargetLtv(uint256 _ltv) external {\n        if (!hasRole(KEEPER, msg.sender)) {\n            _onlyStrategistOrOwner();\n        }\n\n        (, uint256 collateralFactorMantissa, ) = comptroller.markets(address(cWant));\n        require(collateralFactorMantissa > _ltv + allowedLTVDrift);\n        require(_ltv <= collateralFactorMantissa * LTV_SAFETY_ZONE / MANTISSA);\n        targetLTV = _ltv;\n    }\n\n    /**\n     * @dev Sets a new allowed LTV drift\n     * Should be in units of 1e18\n     */\n    function setAllowedLtvDrift(uint256 _drift) external {\n        _onlyStrategistOrOwner();\n        (, uint256 collateralFactorMantissa, ) = comptroller.markets(address(cWant));\n        require(collateralFactorMantissa > targetLTV + _drift);\n        allowedLTVDrift = _drift;\n    }\n\n    /**\n     * @dev Sets a new borrow depth (how many loops for leveraging+deleveraging)\n     */\n    function setBorrowDepth(uint8 _borrowDepth) external {\n        _onlyStrategistOrOwner();\n        require(_borrowDepth <= maxBorrowDepth);\n        borrowDepth = _borrowDepth;\n    }\n\n    /**\n     * @dev Sets the minimum reward the will be sold (too little causes revert from Uniswap)\n     */\n    function setMinScreamToSell(uint256 _minScreamToSell) external {\n        _onlyStrategistOrOwner();\n        minScreamToSell = _minScreamToSell;\n    }\n\n\n    /**\n     * @dev Sets the minimum want to leverage/deleverage (loop) for\n     */\n    function setMinWantToLeverage(uint256 _minWantToLeverage) external {\n        _onlyStrategistOrOwner();\n        minWantToLeverage = _minWantToLeverage;\n    }\n\n    /**\n     * @dev Sets the maximum slippage authorized when withdrawing\n     */\n    function setWithdrawSlippageTolerance(uint256 _withdrawSlippageTolerance) external {\n        _onlyStrategistOrOwner();\n        withdrawSlippageTolerance = _withdrawSlippageTolerance;\n    }\n\n    /**\n     * @dev Sets the swap path to go from {WFTM} to {want}.\n     */\n    function setWftmToWantRoute(address[] calldata _newWftmToWantRoute) external {\n        _onlyStrategistOrOwner();\n        require(_newWftmToWantRoute[0] == WFTM, \"bad route\");\n        require(_newWftmToWantRoute[_newWftmToWantRoute.length - 1] == want, \"bad route\");\n        delete wftmToWantRoute;\n        wftmToWantRoute = _newWftmToWantRoute;\n    }\n\n    /**\n     * @dev Function to retire the strategy. Claims all rewards and withdraws\n     *      all principal from external contracts, and sends everything back to\n     *      the vault. Can only be called by strategist or owner.\n     *\n     * Note: this is not an emergency withdraw function. For that, see panic().\n     */\n    function retireStrat() external doUpdateBalance {\n        _onlyStrategistOrOwner();\n        _claimRewards();\n        _swapRewardsToWftm();\n        _swapToWant();\n\n        _deleverage(type(uint256).max);\n        _withdrawUnderlyingToVault(balanceOfPool);\n    }\n\n    /**\n     * @dev Pauses supplied. Withdraws all funds from Scream, leaving rewards behind.\n     */\n    function panic() external doUpdateBalance {\n        _onlyStrategistOrOwner();\n        _deleverage(type(uint256).max);\n        pause();\n    }\n\n    /**\n     * @dev Unpauses the strat.\n     */\n    function unpause() external {\n        _onlyStrategistOrOwner();\n        _unpause();\n\n        _giveAllowances();\n\n        deposit();\n    }\n\n    /**\n     * @dev Pauses the strat.\n     */\n    function pause() public {\n        _onlyStrategistOrOwner();\n        _pause();\n        _removeAllowances();\n    }\n\n    /**\n     * @dev Function that puts the funds to work.\n     * It gets called whenever someone supplied in the strategy's vault contract.\n     * It supplies {want} Scream to farm {SCREAM}\n     */\n    function deposit() public whenNotPaused doUpdateBalance {\n        CErc20I(cWant).mint(balanceOfWant());\n        uint256 _ltv = _calculateLTV();\n\n        if (_shouldLeverage(_ltv)) {\n            _leverMax();\n        } else if (_shouldDeleverage(_ltv)) {\n            _deleverage(0);\n        }\n    }\n\n    /**\n     * @dev Calculates the total amount of {want} held by the strategy\n     * which is the balance of want + the total amount supplied to Scream.\n     */\n    function balanceOf() public view override returns (uint256) {\n        return balanceOfWant() + balanceOfPool;\n    }\n\n    /**\n     * @dev Calculates the balance of want held directly by the strategy\n     */\n    function balanceOfWant() public view returns (uint256) {\n        return IERC20Upgradeable(want).balanceOf(address(this));\n    }\n\n    /**\n     * @dev Returns the current position in Scream. Does not accrue interest\n     * so might not be accurate, but the cWant is usually updated.\n     */\n    function getCurrentPosition() public view returns (uint256 supplied, uint256 borrowed) {\n        (, uint256 cWantBalance, uint256 borrowBalance, uint256 exchangeRate) = cWant.getAccountSnapshot(address(this));\n        borrowed = borrowBalance;\n\n        supplied = (cWantBalance * exchangeRate) / MANTISSA;\n    }\n\n    /**\n     * @dev This function makes a prediction on how much {SCREAM} is accrued.\n     *      It is not 100% accurate as it uses current balances in Compound to predict into the past.\n     */\n    function predictScreamAccrued() public view returns (uint256) {\n        // Has no previous harvest to calculate accrual\n        if (lastHarvestTimestamp == 0) {\n            return 0;\n        }\n\n        (uint256 supplied, uint256 borrowed) = getCurrentPosition();\n        if (supplied == 0) {\n            return 0; // should be impossible to have 0 balance and positive comp accrued\n        }\n\n        uint256 distributionPerBlock = comptroller.compSpeeds(address(cWant));\n        uint256 totalBorrow = cWant.totalBorrows();\n\n        // total supply needs to be exchanged to underlying using exchange rate\n        uint256 totalSupplyCtoken = cWant.totalSupply();\n        uint256 totalSupply = totalSupplyCtoken\n            * cWant.exchangeRateStored()\n            / MANTISSA;\n\n        uint256 blockShareSupply = 0;\n        if (totalSupply > 0) {\n            blockShareSupply = supplied * distributionPerBlock / totalSupply;\n        }\n\n        uint256 blockShareBorrow = 0;\n        if (totalBorrow > 0) {\n            blockShareBorrow = borrowed * distributionPerBlock / totalBorrow;\n        }\n\n        // How much we expect to earn per block\n        uint256 blockShare = blockShareSupply + blockShareBorrow;\n        uint256 secondsPerBlock = 1; // Average FTM block speed\n        uint256 blocksSinceLast = block.timestamp - lastHarvestTimestamp / secondsPerBlock;\n\n        return blocksSinceLast * blockShare;\n    }\n\n    /**\n     * @dev Updates the balance. This is the state changing version so it sets\n     * balanceOfPool to the latest value.\n     */\n    function updateBalance() public {\n        uint256 supplyBalance = CErc20I(cWant).balanceOfUnderlying(address(this));\n        uint256 borrowBalance = CErc20I(cWant).borrowBalanceCurrent(address(this));\n        balanceOfPool = supplyBalance - borrowBalance;\n    }\n\n    /**\n     * @dev Levers the strategy up to the targetLTV\n     */\n    function _leverMax() internal {\n        uint256 supplied = cWant.balanceOfUnderlying(address(this));\n        uint256 borrowed = cWant.borrowBalanceStored(address(this));\n\n        uint256 realSupply = supplied - borrowed;\n        uint256 newBorrow = _getMaxBorrowFromSupplied(realSupply, targetLTV);\n        uint256 totalAmountToBorrow = newBorrow - borrowed;\n\n        for (uint8 i = 0; i < borrowDepth && totalAmountToBorrow > minWantToLeverage; i++) {\n            totalAmountToBorrow = totalAmountToBorrow - _leverUpStep(totalAmountToBorrow);\n        }\n    }\n\n    /**\n     * @dev Does one step of leveraging\n     */\n    function _leverUpStep(uint256 _withdrawAmount) internal returns (uint256) {\n        if (_withdrawAmount == 0) {\n            return 0;\n        }\n\n        uint256 supplied = cWant.balanceOfUnderlying(address(this));\n        uint256 borrowed = cWant.borrowBalanceStored(address(this));\n        (, uint256 collateralFactorMantissa, ) = comptroller.markets(address(cWant));\n        uint256 canBorrow = (supplied * collateralFactorMantissa) / MANTISSA;\n\n        canBorrow -= borrowed;\n\n        if (canBorrow < _withdrawAmount) {\n            _withdrawAmount = canBorrow;\n        }\n\n        if (_withdrawAmount > 10) {\n            // borrow available amount\n            CErc20I(cWant).borrow(_withdrawAmount);\n\n            // deposit available want as collateral\n            CErc20I(cWant).mint(balanceOfWant());\n        }\n\n        return _withdrawAmount;\n    }\n\n    /**\n     * @dev Gets the maximum amount allowed to be borrowed for a given collateral factor and amount supplied\n     */\n    function _getMaxBorrowFromSupplied(uint256 wantSupplied, uint256 collateralFactor) internal pure returns (uint256) {\n        return ((wantSupplied * collateralFactor) / (MANTISSA - collateralFactor));\n    }\n\n    /**\n     * @dev Returns if the strategy should leverage with the given ltv level\n     */\n    function _shouldLeverage(uint256 _ltv) internal view returns (bool) {\n        if (targetLTV >= allowedLTVDrift && _ltv < targetLTV - allowedLTVDrift) {\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * @dev Returns if the strategy should deleverage with the given ltv level\n     */\n    function _shouldDeleverage(uint256 _ltv) internal view returns (bool) {\n        if (_ltv > targetLTV + allowedLTVDrift) {\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * @dev This is the state changing calculation of LTV that is more accurate\n     * to be used internally.\n     */\n    function _calculateLTV() internal returns (uint256 ltv) {\n        uint256 supplied = cWant.balanceOfUnderlying(address(this));\n        uint256 borrowed = cWant.borrowBalanceStored(address(this));\n\n        if (supplied == 0 || borrowed == 0) {\n            return 0;\n        }\n        ltv = (MANTISSA * borrowed) / supplied;\n    }\n\n    /**\n     * @dev Calculates what the LTV will be after withdrawing\n     */\n    function _calculateLTVAfterWithdraw(uint256 _withdrawAmount) internal returns (uint256 ltv) {\n        uint256 supplied = cWant.balanceOfUnderlying(address(this));\n        uint256 borrowed = cWant.borrowBalanceStored(address(this));\n        supplied = supplied - _withdrawAmount;\n\n        if (supplied == 0 || borrowed == 0) {\n            return 0;\n        }\n        ltv = (uint256(1e18) * borrowed) / supplied;\n    }\n\n    /**\n     * @dev Withdraws want to the vault by redeeming the underlying\n     */\n    function _withdrawUnderlyingToVault(uint256 _withdrawAmount) internal {\n        uint256 initialWithdrawAmount = _withdrawAmount;\n        uint256 supplied = cWant.balanceOfUnderlying(address(this));\n        uint256 borrowed = cWant.borrowBalanceStored(address(this));\n        uint256 realSupplied = supplied - borrowed;\n\n        if (realSupplied == 0) {\n            return;\n        }\n\n        if (_withdrawAmount > realSupplied) {\n            _withdrawAmount = realSupplied;\n        }\n\n        uint256 tempColla = targetLTV + allowedLTVDrift;\n\n        uint256 reservedAmount = 0;\n        if (tempColla == 0) {\n            tempColla = 1e15; // 0.001 * 1e18. lower we have issues\n        }\n\n        reservedAmount = (borrowed * MANTISSA) / tempColla;\n        if (supplied >= reservedAmount) {\n            uint256 redeemable = supplied - reservedAmount;\n            uint256 balance = cWant.balanceOf(address(this));\n            if (balance > 1) {\n                if (redeemable < _withdrawAmount) {\n                    _withdrawAmount = redeemable;\n                }\n            }\n        }\n\n        uint256 withdrawAmount = _withdrawAmount - 1;\n        if(withdrawAmount < initialWithdrawAmount) {\n            require(\n                withdrawAmount >=\n                    (initialWithdrawAmount *\n                        (PERCENT_DIVISOR - withdrawSlippageTolerance)) /\n                        PERCENT_DIVISOR\n            );\n        }\n\n        CErc20I(cWant).redeemUnderlying(withdrawAmount);\n        IERC20Upgradeable(want).safeTransfer(vault, withdrawAmount);\n    }\n\n    /**\n     * @dev For a given withdraw amount, figures out the new borrow with the current supply\n     * that will maintain the target LTV\n     */\n    function _getDesiredBorrow(uint256 _withdrawAmount) internal returns (uint256 position) {\n        //we want to use statechanging for safety\n        uint256 supplied = cWant.balanceOfUnderlying(address(this));\n        uint256 borrowed = cWant.borrowBalanceStored(address(this));\n\n        //When we unwind we end up with the difference between borrow and supply\n        uint256 unwoundSupplied = supplied - borrowed;\n\n        //we want to see how close to collateral target we are.\n        //So we take our unwound supplied and add or remove the _withdrawAmount we are are adding/removing.\n        //This gives us our desired future undwoundDeposit (desired supply)\n\n        uint256 desiredSupply = 0;\n        if (_withdrawAmount > unwoundSupplied) {\n            _withdrawAmount = unwoundSupplied;\n        }\n        desiredSupply = unwoundSupplied - _withdrawAmount;\n\n        //(ds *c)/(1-c)\n        uint256 num = desiredSupply * targetLTV;\n        uint256 den = MANTISSA - targetLTV;\n\n        uint256 desiredBorrow = num / den;\n        if (desiredBorrow > 1e5) {\n            //stop us going right up to the wire\n            desiredBorrow = desiredBorrow - 1e5;\n        }\n\n        position = borrowed - desiredBorrow;\n    }\n\n    /**\n     * @dev For a given withdraw amount, deleverages to a borrow level\n     * that will maintain the target LTV\n     */\n    function _deleverage(uint256 _withdrawAmount) internal {\n        uint256 newBorrow = _getDesiredBorrow(_withdrawAmount);\n\n        // //If there is no deficit we dont need to adjust position\n        // //if the position change is tiny do nothing\n        if (newBorrow > minWantToLeverage) {\n            uint256 i = 0;\n            while (newBorrow > minWantToLeverage + 100) {\n                newBorrow = newBorrow - _leverDownStep(newBorrow);\n                i++;\n                //A limit set so we don't run out of gas\n                if (i >= borrowDepth) {\n                    break;\n                }\n            }\n        }\n    }\n\n    /**\n     * @dev Deleverages one step\n     */\n    function _leverDownStep(uint256 maxDeleverage) internal returns (uint256 deleveragedAmount) {\n        uint256 minAllowedSupply = 0;\n        uint256 supplied = cWant.balanceOfUnderlying(address(this));\n        uint256 borrowed = cWant.borrowBalanceStored(address(this));\n        (, uint256 collateralFactorMantissa, ) = comptroller.markets(address(cWant));\n\n        //collat ration should never be 0. if it is something is very wrong... but just incase\n        if (collateralFactorMantissa != 0) {\n            minAllowedSupply = (borrowed * MANTISSA) / collateralFactorMantissa;\n        }\n        uint256 maxAllowedDeleverageAmount = supplied - minAllowedSupply;\n\n        deleveragedAmount = maxAllowedDeleverageAmount;\n\n        if (deleveragedAmount >= borrowed) {\n            deleveragedAmount = borrowed;\n        }\n        if (deleveragedAmount >= maxDeleverage) {\n            deleveragedAmount = maxDeleverage;\n        }\n        uint256 exchangeRateStored = cWant.exchangeRateStored();\n        //redeemTokens = redeemAmountIn * 1e18 / exchangeRate. must be more than 0\n        //a rounding error means we need another small addition\n        if (deleveragedAmount * MANTISSA >= exchangeRateStored && deleveragedAmount > 10) {\n            deleveragedAmount -= 10; // Amount can be slightly off for tokens with less decimals (USDC), so redeem a bit less\n            cWant.redeemUnderlying(deleveragedAmount);\n            //our borrow has been increased by no more than maxDeleverage\n            cWant.repayBorrow(deleveragedAmount);\n        }\n    }\n\n    /**\n     * @dev Core function of the strat, in charge of collecting and re-investing rewards.\n     * @notice Assumes the deposit will take care of the TVL rebalancing.\n     * 1. Claims {SCREAM} from the comptroller.\n     * 2. Swaps {SCREAM} to {WFTM}.\n     * 3. Claims fees for the harvest caller and treasury.\n     * 4. Swaps the {WFTM} token for {want}\n     * 5. Deposits.\n     */\n    function _harvestCore() internal override {\n        _claimRewards();\n        _swapRewardsToWftm();\n        _chargeFees();\n        _swapToWant();\n        deposit();\n    }\n\n    /**\n     * @dev Core harvest function.\n     * Get rewards from markets entered\n     */\n    function _claimRewards() internal {\n        CTokenI[] memory tokens = new CTokenI[](1);\n        tokens[0] = cWant;\n\n        comptroller.claimComp(address(this), tokens);\n    }\n\n    /**\n     * @dev Core harvest function.\n     * Swaps {SCREAM} to {WFTM}\n     */\n    function _swapRewardsToWftm() internal {\n        uint256 screamBalance = IERC20Upgradeable(SCREAM).balanceOf(address(this));\n        if (screamBalance >= minScreamToSell) {\n            IUniswapRouter(UNI_ROUTER).swapExactTokensForTokensSupportingFeeOnTransferTokens(\n                screamBalance,\n                0,\n                screamToWftmRoute,\n                address(this),\n                block.timestamp + 600\n            );\n        }\n    }\n\n    /**\n     * @dev Core harvest function.\n     * Charges fees based on the amount of WFTM gained from reward\n     */\n    function _chargeFees() internal {\n        uint256 wftmFee = (IERC20Upgradeable(WFTM).balanceOf(address(this)) * totalFee) / PERCENT_DIVISOR;\n        if (wftmFee != 0) {\n            uint256 callFeeToUser = (wftmFee * callFee) / PERCENT_DIVISOR;\n            uint256 treasuryFeeToVault = (wftmFee * treasuryFee) / PERCENT_DIVISOR;\n            uint256 feeToStrategist = (treasuryFeeToVault * strategistFee) / PERCENT_DIVISOR;\n            treasuryFeeToVault -= feeToStrategist;\n\n            IERC20Upgradeable(WFTM).safeTransfer(msg.sender, callFeeToUser);\n            IERC20Upgradeable(WFTM).safeTransfer(treasury, treasuryFeeToVault);\n            IERC20Upgradeable(WFTM).safeTransfer(strategistRemitter, feeToStrategist);\n        }\n    }\n\n    /**\n     * @dev Core harvest function.\n     * Swaps {WFTM} for {want}\n     */\n    function _swapToWant() internal {\n        if (want == WFTM) {\n            return;\n        }\n        \n        uint256 wftmBalance = IERC20Upgradeable(WFTM).balanceOf(address(this));\n        if (wftmBalance != 0) {\n            IUniswapRouter(UNI_ROUTER).swapExactTokensForTokensSupportingFeeOnTransferTokens(\n                wftmBalance,\n                0,\n                wftmToWantRoute,\n                address(this),\n                block.timestamp + 600\n            );\n        }\n    }\n\n    /**\n     * @dev Gives the necessary allowances to mint cWant, swap rewards etc\n     */\n    function _giveAllowances() internal {\n        IERC20Upgradeable(want).safeIncreaseAllowance(\n            address(cWant),\n            type(uint256).max - IERC20Upgradeable(want).allowance(address(this), address(cWant))\n        );\n        IERC20Upgradeable(WFTM).safeIncreaseAllowance(\n            UNI_ROUTER,\n            type(uint256).max - IERC20Upgradeable(WFTM).allowance(address(this), UNI_ROUTER)\n        );\n        IERC20Upgradeable(SCREAM).safeIncreaseAllowance(\n            UNI_ROUTER,\n            type(uint256).max - IERC20Upgradeable(SCREAM).allowance(address(this), UNI_ROUTER)\n        );\n    }\n\n    /**\n     * @dev Removes all allowance that were given\n     */\n    function _removeAllowances() internal {\n        IERC20Upgradeable(want).safeDecreaseAllowance(address(cWant), IERC20Upgradeable(want).allowance(address(this), address(cWant)));\n        IERC20Upgradeable(WFTM).safeDecreaseAllowance(UNI_ROUTER, IERC20Upgradeable(WFTM).allowance(address(this), UNI_ROUTER));\n        IERC20Upgradeable(SCREAM).safeDecreaseAllowance(UNI_ROUTER, IERC20Upgradeable(SCREAM).allowance(address(this), UNI_ROUTER));\n    }\n\n    /**\n     * @dev Helper modifier for functions that need to update the internal balance at the end of their execution.\n     */\n    modifier doUpdateBalance {\n        _;\n        updateBalance();\n    }\n}\n"
        },
        "./contracts/abstract/ReaperBaseStrategy.sol": {
            "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.11;\n\nimport \"../interfaces/IStrategy.sol\";\nimport \"../interfaces/IVault.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\n\nabstract contract ReaperBaseStrategy is\n    IStrategy,\n    UUPSUpgradeable,\n    AccessControlEnumerableUpgradeable,\n    PausableUpgradeable\n{\n    uint256 public constant PERCENT_DIVISOR = 10_000;\n    uint256 public constant ONE_YEAR = 365 days;\n    uint256 public constant UPGRADE_TIMELOCK = 48 hours; // minimum 48 hours for RF\n\n    struct Harvest {\n        uint256 timestamp;\n        uint256 vaultSharePrice;\n    }\n\n    Harvest[] public harvestLog;\n    uint256 public harvestLogCadence;\n    uint256 public lastHarvestTimestamp;\n\n    /**\n     * Reaper Roles\n     */\n    bytes32 public constant STRATEGIST = keccak256(\"STRATEGIST\");\n    bytes32 public constant STRATEGIST_MULTISIG = keccak256(\"STRATEGIST_MULTISIG\");\n    bytes32 public constant KEEPER = keccak256(\"KEEPER\");\n\n    /**\n     * @dev Reaper contracts:\n     * {treasury} - Address of the Reaper treasury\n     * {vault} - Address of the vault that controls the strategy's funds.\n     * {strategistRemitter} - Address where strategist fee is remitted to.\n     */\n    address public treasury;\n    address public vault;\n    address public strategistRemitter;\n\n    /**\n     * Fee related constants:\n     * {MAX_FEE} - Maximum fee allowed by the strategy. Hard-capped at 10%.\n     * {STRATEGIST_MAX_FEE} - Maximum strategist fee allowed by the strategy (as % of treasury fee).\n     *                        Hard-capped at 50%\n     */\n    uint256 public constant MAX_FEE = 1000;\n    uint256 public constant STRATEGIST_MAX_FEE = 5000;\n\n    /**\n     * @dev Distribution of fees earned, expressed as % of the profit from each harvest.\n     * {totalFee} - divided by 10,000 to determine the % fee. Set to 4.5% by default and\n     * lowered as necessary to provide users with the most competitive APY.\n     *\n     * {callFee} - Percent of the totalFee reserved for the harvester (1000 = 10% of total fee: 0.45% by default)\n     * {treasuryFee} - Percent of the totalFee taken by maintainers of the software (9000 = 90% of total fee: 4.05% by default)\n     * {strategistFee} - Percent of the treasuryFee taken by strategist (2500 = 25% of treasury fee: 1.0125% by default)\n     *\n     * {securityFee} - Fee taxed when a user withdraws funds. Taken to prevent flash deposit/harvest attacks.\n     * These funds are redistributed to stakers in the pool.\n     */\n    uint256 public totalFee;\n    uint256 public callFee;\n    uint256 public treasuryFee;\n    uint256 public strategistFee;\n    uint256 public securityFee; // unused but cannot remove between upgrades\n\n    /**\n     * {TotalFeeUpdated} Event that is fired each time the total fee is updated.\n     * {FeesUpdated} Event that is fired each time callFee+treasuryFee+strategistFee are updated.\n     * {StratHarvest} Event that is fired each time the strategy gets harvested.\n     * {StrategistRemitterUpdated} Event that is fired each time the strategistRemitter address is updated.\n     */\n    event TotalFeeUpdated(uint256 newFee);\n    event FeesUpdated(uint256 newCallFee, uint256 newTreasuryFee, uint256 newStrategistFee);\n    event StratHarvest(address indexed harvester);\n    event StrategistRemitterUpdated(address newStrategistRemitter);\n\n    uint256 public upgradeProposalTime;\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() initializer {}\n\n    function __ReaperBaseStrategy_init(\n        address _vault,\n        address[] memory _feeRemitters,\n        address[] memory _strategists\n    ) internal onlyInitializing {\n        __UUPSUpgradeable_init();\n        __AccessControlEnumerable_init();\n        __Pausable_init_unchained();\n\n        harvestLogCadence = 1 hours;\n        totalFee = 450;\n        callFee = 1000;\n        treasuryFee = 9000;\n        strategistFee = 2500;\n        securityFee = 10;\n\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        clearUpgradeCooldown();\n\n        vault = _vault;\n        treasury = _feeRemitters[0];\n        strategistRemitter = _feeRemitters[1];\n\n        for (uint256 i = 0; i < _strategists.length; i++) {\n            _grantRole(STRATEGIST, _strategists[i]);\n        }\n\n        harvestLog.push(Harvest({timestamp: block.timestamp, vaultSharePrice: IVault(_vault).getPricePerFullShare()}));\n    }\n\n    /**\n     * @dev harvest() function that takes care of logging. Subcontracts should\n     *      override _harvestCore() and implement their specific logic in it.\n     */\n    function harvest() external override whenNotPaused {\n        _harvestCore();\n\n        if (block.timestamp >= harvestLog[harvestLog.length - 1].timestamp + harvestLogCadence) {\n            harvestLog.push(\n                Harvest({timestamp: block.timestamp, vaultSharePrice: IVault(vault).getPricePerFullShare()})\n            );\n        }\n\n        lastHarvestTimestamp = block.timestamp;\n        emit StratHarvest(msg.sender);\n    }\n\n    function harvestLogLength() external view returns (uint256) {\n        return harvestLog.length;\n    }\n\n    /**\n     * @dev Traverses the harvest log backwards _n items,\n     *      and returns the average APR calculated across all the included\n     *      log entries. APR is multiplied by PERCENT_DIVISOR to retain precision.\n     */\n    function averageAPRAcrossLastNHarvests(int256 _n) external view returns (int256) {\n        require(harvestLog.length >= 2, \"need at least 2 log entries\");\n\n        int256 runningAPRSum;\n        int256 numLogsProcessed;\n\n        for (uint256 i = harvestLog.length - 1; i > 0 && numLogsProcessed < _n; i--) {\n            runningAPRSum += calculateAPRUsingLogs(i - 1, i);\n            numLogsProcessed++;\n        }\n\n        return runningAPRSum / numLogsProcessed;\n    }\n\n    /**\n     * @dev Only strategist or owner can edit the log cadence.\n     */\n    function updateHarvestLogCadence(uint256 _newCadenceInSeconds) external {\n        _onlyStrategistOrOwner();\n        harvestLogCadence = _newCadenceInSeconds;\n    }\n\n    /**\n     * @dev updates the total fee, capped at 5%; only owner.\n     */\n    function updateTotalFee(uint256 _totalFee) external override onlyRole(DEFAULT_ADMIN_ROLE) {\n        require(_totalFee <= MAX_FEE, \"Fee Too High\");\n        totalFee = _totalFee;\n        emit TotalFeeUpdated(totalFee);\n    }\n\n    /**\n     * @dev updates the call fee, treasury fee, and strategist fee\n     *      call Fee + treasury Fee must add up to PERCENT_DIVISOR\n     *\n     *      strategist fee is expressed as % of the treasury fee and\n     *      must be no more than STRATEGIST_MAX_FEE\n     *\n     *      only owner\n     */\n    function updateFees(\n        uint256 _callFee,\n        uint256 _treasuryFee,\n        uint256 _strategistFee\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) returns (bool) {\n        require(_callFee + _treasuryFee == PERCENT_DIVISOR, \"sum != PERCENT_DIVISOR\");\n        require(_strategistFee <= STRATEGIST_MAX_FEE, \"strategist fee > STRATEGIST_MAX_FEE\");\n\n        callFee = _callFee;\n        treasuryFee = _treasuryFee;\n        strategistFee = _strategistFee;\n        emit FeesUpdated(callFee, treasuryFee, strategistFee);\n        return true;\n    }\n\n    /**\n     * @dev only owner can update treasury address.\n     */\n    function updateTreasury(address newTreasury) external onlyRole(DEFAULT_ADMIN_ROLE) returns (bool) {\n        treasury = newTreasury;\n        return true;\n    }\n\n    /**\n     * @dev Updates the current strategistRemitter.\n     *      If there is only one strategist this function may be called by\n     *      that strategist. However if there are multiple strategists\n     *      this function may only be called by the STRATEGIST_MULTISIG role.\n     */\n    function updateStrategistRemitter(address _newStrategistRemitter) external {\n        if (getRoleMemberCount(STRATEGIST) == 1) {\n            _checkRole(STRATEGIST, msg.sender);\n        } else {\n            _checkRole(STRATEGIST_MULTISIG, msg.sender);\n        }\n\n        require(_newStrategistRemitter != address(0), \"!0\");\n        strategistRemitter = _newStrategistRemitter;\n        emit StrategistRemitterUpdated(_newStrategistRemitter);\n    }\n\n    /**\n     * @dev DEFAULT_ADMIN_ROLE must call this function prior to upgrading the implementation\n     *      and wait UPGRADE_TIMELOCK seconds before executing the upgrade.\n     */\n    function initiateUpgradeCooldown() external onlyRole(DEFAULT_ADMIN_ROLE) {\n        upgradeProposalTime = block.timestamp;\n    }\n\n    /**\n     * @dev This function is called:\n     *      - in initialize()\n     *      - as part of a successful upgrade\n     *      - manually by DEFAULT_ADMIN_ROLE to clear the upgrade cooldown.\n     */\n    function clearUpgradeCooldown() public onlyRole(DEFAULT_ADMIN_ROLE) {\n        upgradeProposalTime = block.timestamp + (ONE_YEAR * 100);\n    }\n\n    /**\n     * @dev Only allow access to strategist or owner\n     */\n    function _onlyStrategistOrOwner() internal view {\n        require(hasRole(STRATEGIST, msg.sender) || hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \"Not authorized\");\n    }\n\n    function calculateAPRUsingLogs(uint256 _startIndex, uint256 _endIndex) public view returns (int256) {\n        Harvest storage start = harvestLog[_startIndex];\n        Harvest storage end = harvestLog[_endIndex];\n        bool increasing = true;\n        if (end.vaultSharePrice < start.vaultSharePrice) {\n            increasing = false;\n        }\n\n        uint256 unsignedSharePriceChange;\n        if (increasing) {\n            unsignedSharePriceChange = end.vaultSharePrice - start.vaultSharePrice;\n        } else {\n            unsignedSharePriceChange = start.vaultSharePrice - end.vaultSharePrice;\n        }\n\n        uint256 unsignedPercentageChange = (unsignedSharePriceChange * 1e18) / start.vaultSharePrice;\n        uint256 timeDifference = end.timestamp - start.timestamp;\n\n        uint256 yearlyUnsignedPercentageChange = (unsignedPercentageChange * ONE_YEAR) / timeDifference;\n        yearlyUnsignedPercentageChange /= 1e14; // restore basis points precision\n\n        if (increasing) {\n            return int256(yearlyUnsignedPercentageChange);\n        }\n\n        return -int256(yearlyUnsignedPercentageChange);\n    }\n\n    /**\n     * @dev Returns the approx amount of profit from harvesting plus fee that\n     *      would be returned to harvest caller.\n     */\n    function estimateHarvest() external view virtual returns (uint256 profit, uint256 callFeeToUser);\n\n    function balanceOf() public view virtual override returns (uint256);\n\n    /**\n     * @dev subclasses should add their custom harvesting logic in this function\n     *      including charging any fees.\n     */\n    function _harvestCore() internal virtual;\n\n    /**\n     * @dev This function must be overriden simply for access control purposes.\n     *      Only DEFAULT_ADMIN_ROLE can upgrade the implementation once the timelock\n     *      has passed.\n     */\n    function _authorizeUpgrade(address) internal override onlyRole(DEFAULT_ADMIN_ROLE) {\n        require(upgradeProposalTime + UPGRADE_TIMELOCK < block.timestamp, \"cooldown not initiated or still active\");\n        clearUpgradeCooldown();\n    }\n}"
        },
        "./contracts/interfaces/IStrategy.sol": {
            "content": "// SPDX-License-Identifier: agpl-3.0\n\npragma solidity 0.8.11;\n\ninterface IStrategy {\n    //deposits all funds into the farm\n    function deposit() external;\n\n    //vault only - withdraws funds from the strategy\n    function withdraw(uint256 _amount) external;\n\n    //returns the balance of all tokens managed by the strategy\n    function balanceOf() external view returns (uint256);\n\n    //claims farmed tokens, distributes fees, and sells tokens to re-add to the LP & farm\n    function harvest() external;\n\n    //withdraws all tokens and sends them back to the vault\n    function retireStrat() external;\n\n    //pauses deposits, resets allowances, and withdraws all funds from farm\n    function panic() external;\n\n    //pauses deposits and resets allowances\n    function pause() external;\n\n    //unpauses deposits and maxes out allowances again\n    function unpause() external;\n\n    //updates Total Fee\n    function updateTotalFee(uint256 _totalFee) external;\n}"
        },
        "./contracts/interfaces/IVault.sol": {
            "content": "// SPDX-License-Identifier: agpl-3.0\n\npragma solidity 0.8.11;\n\ninterface IVault {\n    function getPricePerFullShare() external view returns (uint256);\n}"
        },
        "./contracts/interfaces/IUniswapRouter.sol": {
            "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.11;\n\ninterface IUniswapRouter {\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external;\n\n    function getAmountsOut(uint256 amountIn, address[] memory path)\n        external\n        view\n        returns (uint256[] memory amounts);\n}\n"
        },
        "./contracts/interfaces/CErc20I.sol": {
            "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.11;\n\nimport \"./CTokenI.sol\";\n\ninterface CErc20I is CTokenI {\n    function mint(uint256 mintAmount) external returns (uint256);\n\n    function redeem(uint256 redeemTokens) external returns (uint256);\n\n    function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\n\n    function borrow(uint256 borrowAmount) external returns (uint256);\n\n    function repayBorrow(uint256 repayAmount) external returns (uint256);\n\n    function repayBorrowBehalf(address borrower, uint256 repayAmount)\n        external\n        returns (uint256);\n\n    function liquidateBorrow(\n        address borrower,\n        uint256 repayAmount,\n        CTokenI cTokenCollateral\n    ) external returns (uint256);\n\n    function underlying() external view returns (address);\n\n    function comptroller() external view returns (address);\n}"
        },
        "./contracts/interfaces/CTokenI.sol": {
            "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.11;\n\nimport \"./InterestRateModel.sol\";\n\ninterface CTokenI {\n    /*** Market Events ***/\n\n    /**\n     * @notice Event emitted when interest is accrued\n     */\n    event AccrueInterest(\n        uint256 cashPrior,\n        uint256 interestAccumulated,\n        uint256 borrowIndex,\n        uint256 totalBorrows\n    );\n\n    /**\n     * @notice Event emitted when tokens are minted\n     */\n    event Mint(address minter, uint256 mintAmount, uint256 mintTokens);\n\n    /**\n     * @notice Event emitted when tokens are redeemed\n     */\n    event Redeem(address redeemer, uint256 redeemAmount, uint256 redeemTokens);\n\n    /**\n     * @notice Event emitted when underlying is borrowed\n     */\n    event Borrow(\n        address borrower,\n        uint256 borrowAmount,\n        uint256 accountBorrows,\n        uint256 totalBorrows\n    );\n\n    /**\n     * @notice Event emitted when a borrow is repaid\n     */\n    event RepayBorrow(\n        address payer,\n        address borrower,\n        uint256 repayAmount,\n        uint256 accountBorrows,\n        uint256 totalBorrows\n    );\n\n    /**\n     * @notice Event emitted when a borrow is liquidated\n     */\n    event LiquidateBorrow(\n        address liquidator,\n        address borrower,\n        uint256 repayAmount,\n        address cTokenCollateral,\n        uint256 seizeTokens\n    );\n\n    /*** Admin Events ***/\n\n    /**\n     * @notice Event emitted when pendingAdmin is changed\n     */\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\n\n    /**\n     * @notice Event emitted when pendingAdmin is accepted, which means admin is updated\n     */\n    event NewAdmin(address oldAdmin, address newAdmin);\n\n    /**\n     * @notice Event emitted when the reserve factor is changed\n     */\n    event NewReserveFactor(\n        uint256 oldReserveFactorMantissa,\n        uint256 newReserveFactorMantissa\n    );\n\n    /**\n     * @notice Event emitted when the reserves are added\n     */\n    event ReservesAdded(\n        address benefactor,\n        uint256 addAmount,\n        uint256 newTotalReserves\n    );\n\n    /**\n     * @notice Event emitted when the reserves are reduced\n     */\n    event ReservesReduced(\n        address admin,\n        uint256 reduceAmount,\n        uint256 newTotalReserves\n    );\n\n    /**\n     * @notice EIP20 Transfer event\n     */\n    event Transfer(address indexed from, address indexed to, uint256 amount);\n\n    /**\n     * @notice EIP20 Approval event\n     */\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 amount\n    );\n\n    /**\n     * @notice Failure event\n     */\n    event Failure(uint256 error, uint256 info, uint256 detail);\n\n    function transfer(address dst, uint256 amount) external returns (bool);\n\n    function transferFrom(\n        address src,\n        address dst,\n        uint256 amount\n    ) external returns (bool);\n\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    function balanceOf(address owner) external view returns (uint256);\n\n    function balanceOfUnderlying(address owner) external returns (uint256);\n\n    function getAccountSnapshot(address account)\n        external\n        view\n        returns (\n            uint256,\n            uint256,\n            uint256,\n            uint256\n        );\n\n    function borrowRatePerBlock() external view returns (uint256);\n\n    function supplyRatePerBlock() external view returns (uint256);\n\n    function totalBorrowsCurrent() external returns (uint256);\n\n    function borrowBalanceCurrent(address account) external returns (uint256);\n\n    function borrowBalanceStored(address account)\n        external\n        view\n        returns (uint256);\n\n    function exchangeRateCurrent() external returns (uint256);\n\n    function accrualBlockNumber() external view returns (uint256);\n\n    function exchangeRateStored() external view returns (uint256);\n\n    function getCash() external view returns (uint256);\n\n    function accrueInterest() external returns (uint256);\n\n    function interestRateModel() external view returns (InterestRateModel);\n\n    function totalReserves() external view returns (uint256);\n\n    function reserveFactorMantissa() external view returns (uint256);\n\n    function seize(\n        address liquidator,\n        address borrower,\n        uint256 seizeTokens\n    ) external returns (uint256);\n\n    function totalBorrows() external view returns (uint256);\n\n    function totalSupply() external view returns (uint256);\n}"
        },
        "./contracts/interfaces/InterestRateModel.sol": {
            "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.11;\n\ninterface InterestRateModel {\n    /**\n     * @notice Calculates the current borrow interest rate per block\n     * @param cash The total amount of cash the market has\n     * @param borrows The total amount of borrows the market has outstanding\n     * @param reserves The total amount of reserves the market has\n     * @return The borrow rate per block (as a percentage, and scaled by 1e18)\n     */\n    function getBorrowRate(\n        uint256 cash,\n        uint256 borrows,\n        uint256 reserves\n    ) external view returns (uint256, uint256);\n\n    /**\n     * @notice Calculates the current supply interest rate per block\n     * @param cash The total amount of cash the market has\n     * @param borrows The total amount of borrows the market has outstanding\n     * @param reserves The total amount of reserves the market has\n     * @param reserveFactorMantissa The current reserve factor the market has\n     * @return The supply rate per block (as a percentage, and scaled by 1e18)\n     */\n    function getSupplyRate(\n        uint256 cash,\n        uint256 borrows,\n        uint256 reserves,\n        uint256 reserveFactorMantissa\n    ) external view returns (uint256);\n}"
        },
        "./contracts/interfaces/IComptroller.sol": {
            "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.11;\n\nimport './CTokenI.sol';\ninterface IComptroller {\n    function compAccrued(address user) external view returns (uint256 amount);\n    function claimComp(address holder, CTokenI[] memory _scTokens) external;\n    function claimComp(address holder) external;\n    function enterMarkets(address[] memory _scTokens) external;\n    function pendingComptrollerImplementation() view external returns (address implementation);\n    function markets(address ctoken)\n        external\n        view\n        returns (\n            bool,\n            uint256,\n            bool\n        );\n    function compSpeeds(address ctoken) external view returns (uint256); // will be deprecated\n}"
        },
        "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\nimport \"../../../utils/AddressUpgradeable.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20Upgradeable {\n    using AddressUpgradeable for address;\n\n    function safeTransfer(\n        IERC20Upgradeable token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20Upgradeable token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
        },
        "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
        },
        "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
        },
        "@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlEnumerableUpgradeable.sol\";\nimport \"./AccessControlUpgradeable.sol\";\nimport \"../utils/structs/EnumerableSetUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\n */\nabstract contract AccessControlEnumerableUpgradeable is Initializable, IAccessControlEnumerableUpgradeable, AccessControlUpgradeable {\n    function __AccessControlEnumerable_init() internal onlyInitializing {\n    }\n\n    function __AccessControlEnumerable_init_unchained() internal onlyInitializing {\n    }\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\n\n    mapping(bytes32 => EnumerableSetUpgradeable.AddressSet) private _roleMembers;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlEnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\n        return _roleMembers[role].at(index);\n    }\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\n        return _roleMembers[role].length();\n    }\n\n    /**\n     * @dev Overload {_grantRole} to track enumerable memberships\n     */\n    function _grantRole(bytes32 role, address account) internal virtual override {\n        super._grantRole(role, account);\n        _roleMembers[role].add(account);\n    }\n\n    /**\n     * @dev Overload {_revokeRole} to track enumerable memberships\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual override {\n        super._revokeRole(role, account);\n        _roleMembers[role].remove(account);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
        },
        "@openzeppelin/contracts-upgradeable/access/IAccessControlEnumerableUpgradeable.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlUpgradeable.sol\";\n\n/**\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\n */\ninterface IAccessControlEnumerableUpgradeable is IAccessControlUpgradeable {\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\n}\n"
        },
        "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControlUpgradeable {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
        },
        "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlUpgradeable.sol\";\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../utils/StringsUpgradeable.sol\";\nimport \"../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\n    function __AccessControl_init() internal onlyInitializing {\n    }\n\n    function __AccessControl_init_unchained() internal onlyInitializing {\n    }\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role, _msgSender());\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        StringsUpgradeable.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        StringsUpgradeable.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
        },
        "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
        },
        "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() initializer {}\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\n        // contract may have been reentered.\n        require(_initializing ? _isConstructor() : !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} modifier, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    function _isConstructor() private view returns (bool) {\n        return !AddressUpgradeable.isContract(address(this));\n    }\n}\n"
        },
        "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
        },
        "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\n    function __ERC165_init() internal onlyInitializing {\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
        },
        "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
        },
        "@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSetUpgradeable {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastvalue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastvalue;\n                // Update the index for the moved value\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
        },
        "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/UUPSUpgradeable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../interfaces/draft-IERC1822Upgradeable.sol\";\nimport \"../ERC1967/ERC1967UpgradeUpgradeable.sol\";\nimport \"./Initializable.sol\";\n\n/**\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\n *\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\n * `UUPSUpgradeable` with a custom implementation of upgrades.\n *\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\n *\n * _Available since v4.1._\n */\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\n    function __UUPSUpgradeable_init() internal onlyInitializing {\n    }\n\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\n    }\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\n    address private immutable __self = address(this);\n\n    /**\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\n     * fail.\n     */\n    modifier onlyProxy() {\n        require(address(this) != __self, \"Function must be called through delegatecall\");\n        require(_getImplementation() == __self, \"Function must be called through active proxy\");\n        _;\n    }\n\n    /**\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\n     * callable on the implementing contract but not through proxies.\n     */\n    modifier notDelegated() {\n        require(address(this) == __self, \"UUPSUpgradeable: must not be called through delegatecall\");\n        _;\n    }\n\n    /**\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\n     * implementation. It is used to validate that the this implementation remains valid after an upgrade.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\n     */\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\n        return _IMPLEMENTATION_SLOT;\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\n     * encoded in `data`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, data, true);\n    }\n\n    /**\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\n     * {upgradeTo} and {upgradeToAndCall}.\n     *\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\n     *\n     * ```solidity\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\n     * ```\n     */\n    function _authorizeUpgrade(address newImplementation) internal virtual;\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
        },
        "@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822ProxiableUpgradeable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"
        },
        "@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeaconUpgradeable.sol\";\nimport \"../../interfaces/draft-IERC1822Upgradeable.sol\";\nimport \"../../utils/AddressUpgradeable.sol\";\nimport \"../../utils/StorageSlotUpgradeable.sol\";\nimport \"../utils/Initializable.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n *\n * @custom:oz-upgrades-unsafe-allow delegatecall\n */\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\n    function __ERC1967Upgrade_init() internal onlyInitializing {\n    }\n\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\n    }\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(AddressUpgradeable.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            _functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\n            } catch {\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Emitted when the beacon is upgraded.\n     */\n    event BeaconUpgraded(address indexed beacon);\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(AddressUpgradeable.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\n        }\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\n        require(AddressUpgradeable.isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return AddressUpgradeable.verifyCallResult(success, returndata, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
        },
        "@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeaconUpgradeable {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
        },
        "@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlotUpgradeable {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"
        },
        "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol": {
            "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    function __Pausable_init() internal onlyInitializing {\n        __Pausable_init_unchained();\n    }\n\n    function __Pausable_init_unchained() internal onlyInitializing {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
        }
    },
    "settings": {
        "metadata": {
            "useLiteralContent": true
        },
        "optimizer": {
            "enabled": true,
            "runs": 200
        },
        "outputSelection": {
            "*": {
                "*": [
                    "abi",
                    "evm.bytecode",
                    "evm.deployedBytecode",
                    "evm.methodIdentifiers"
                ],
                "": [
                    "id",
                    "ast"
                ]
            }
        }
    }
}